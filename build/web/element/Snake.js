import { BASE_ANGLE, SPEED } from '~/common/config';
import { getSnakeHeader } from '~/libs/imageStore';
import { gameMap } from '~/main';
import { Base } from './Base';
export class Movement {
    constructor(x, y, speed, angle) {
        this.x = x;
        this.y = y;
        this.speed = speed;
        this.angle = angle;
    }
}
export class Snake extends Base {
    constructor(options) {
        super(options);
        this.point = 0;
        this.isSpeedUp = false;
        this.fillColor = '';
        this.stopped = false;
        // save snake's movement
        this.movementQueue = [];
        this.speed = SPEED;
        this.oldSpeed = SPEED;
        this.turnSpeed = 0.06;
        this.vx = 0;
        this.vy = 0;
        this.fillColor = options.fillColor || '#fff';
        this.toAngle = this.angle = (options.angle || 0) + BASE_ANGLE;
        this.length = options.length || 0;
        this.updateSize();
        this.velocity();
    }
    updateSize(added = 0) {
        this.width += added;
        this.height += added;
        this.length += added * 50;
        this.turnSpeed -= added / 1000;
        this.img = getSnakeHeader(this.width, this.height);
        this.movementQueueLen = Math.ceil(this.length / this.oldSpeed);
    }
    // move to new position
    moveTo(nx, ny) {
        const x = nx - this.x;
        const y = this.y - ny;
        let angle = Math.atan(Math.abs(x / y));
        // calculate angle, value is 0-360
        if (x > 0 && y < 0) {
            angle = Math.PI - angle;
        }
        else if (x < 0 && y < 0) {
            angle = Math.PI + angle;
        }
        else if (x < 0 && y > 0) {
            angle = Math.PI * 2 - angle;
        }
        const oldAngle = Math.abs(this.toAngle % (Math.PI * 2));
        // number of turns
        let rounds = ~~(this.toAngle / (Math.PI * 2));
        this.toAngle = angle;
        if (oldAngle >= Math.PI * 3 / 2 && this.toAngle <= Math.PI / 2) {
            // move from fourth quadrant to first quadrant
            rounds++;
        }
        else if (oldAngle <= Math.PI / 2 && this.toAngle >= Math.PI * 3 / 2) {
            // move from first quadrant to fourth quadrant
            rounds--;
        }
        // calculate the real angle by rounds
        this.toAngle += rounds * Math.PI * 2;
    }
    // calculate horizontal speed and vertical speed by angle of snake header
    velocity() {
        const angle = this.angle % (Math.PI * 2);
        const vx = Math.abs(this.speed * Math.sin(angle));
        const vy = Math.abs(this.speed * Math.cos(angle));
        if (angle < Math.PI / 2) {
            this.vx = vx;
            this.vy = -vy;
        }
        else if (angle < Math.PI) {
            this.vx = vx;
            this.vy = vy;
        }
        else if (angle < Math.PI * 3 / 2) {
            this.vx = -vx;
            this.vy = vy;
        }
        else {
            this.vx = -vx;
            this.vy = -vy;
        }
    }
    // turn around
    turnAround() {
        const angleDistance = this.toAngle - this.angle;
        if (Math.abs(angleDistance) <= this.turnSpeed) {
            // reset angle
            this.toAngle = this.angle = BASE_ANGLE + this.toAngle % (Math.PI * 2);
        }
        else {
            this.angle += Math.sign(angleDistance) * this.turnSpeed;
        }
    }
    speedUp() {
        if (this.isSpeedUp) {
            return;
        }
        this.isSpeedUp = true;
        this.oldSpeed = this.speed;
        this.speed *= 2;
    }
    speedDown() {
        if (!this.isSpeedUp) {
            return;
        }
        this.isSpeedUp = false;
        this.speed = this.oldSpeed;
    }
    // eat food
    eat(food) {
        this.point += food.point;
        // add points
        const added = food.point / 200;
        this.updateSize(added);
        return added;
    }
    // snake action
    action() {
        if (this.stopped) {
            return;
        }
        // save movement
        this.movementQueue.push(new Movement(this.x, this.y, this.speed, this.angle));
        if (this.movementQueue.length > this.movementQueueLen) {
            this.movementQueue.shift();
        }
        this.turnAround();
        this.velocity();
        this.x += this.vx;
        this.y += this.vy;
        // avoid moving to outside
        gameMap.limit(this);
    }
    // render snake
    render() {
        gameMap.ctx.save();
        gameMap.ctx.beginPath();
        gameMap.ctx.moveTo(this.paintX, this.paintY);
        // stroke body
        let wholeLength = this.length;
        if (this.movementQueue.length) {
            let i = this.movementQueue.length - 1;
            while (i) {
                const movement = this.movementQueue[i];
                let x = movement.x;
                let y = movement.y;
                if (wholeLength > 0 && wholeLength < movement.speed) {
                    const lm = this.movementQueue[i + 1] || this;
                    const ratio = wholeLength / movement.speed;
                    x = lm.x - (lm.x - x) * ratio;
                    y = lm.y - (lm.y - y) * ratio;
                }
                else if (wholeLength < 0) {
                    break;
                }
                i--;
                wholeLength -= movement.speed;
                gameMap.ctx.lineTo(gameMap.view.relativeX(x), gameMap.view.relativeY(y));
            }
        }
        gameMap.ctx.lineCap = 'round';
        gameMap.ctx.lineJoin = 'round';
        gameMap.ctx.strokeStyle = this.fillColor;
        gameMap.ctx.lineWidth = this.width;
        gameMap.ctx.stroke();
        gameMap.ctx.restore();
        // draw header
        gameMap.ctx.save();
        gameMap.ctx.translate(this.paintX, this.paintY);
        gameMap.ctx.rotate(this.angle);
        gameMap.ctx.drawImage(this.img, -this.paintWidth / 2, -this.paintHeight / 2, this.paintWidth, this.paintHeight);
        gameMap.ctx.restore();
    }
}
export class CustomSnake extends Snake {
    constructor() {
        super(...arguments);
        this.moveList = [];
        this.animateStep = 1;
    }
    // move to new position
    sync(newSize, length, movement) {
        const added = newSize - this.width;
        this.length = length;
        this.updateSize(added);
        this.moveList.push(movement);
    }
    // snake action
    action() {
        if (this.stopped || !this.moveList.length) {
            return;
        }
        // save movement
        if (this.lastMovement) {
            this.movementQueue.push(this.lastMovement);
            if (this.movementQueue.length > this.movementQueueLen) {
                this.movementQueue.shift();
            }
        }
        const len = this.moveList.length;
        const start = this.moveList.length - this.animateStep;
        this.moveList = this.moveList.slice(0, (start < 0 ? 0 : start) + 1);
        const movement = this.moveList.shift();
        if (!movement) {
            return;
        }
        this.lastMovement = movement;
        this.moveTo(movement.x, movement.y);
        this.toAngle = this.angle = BASE_ANGLE + this.toAngle % (Math.PI * 2);
        this.x = movement.x;
        this.y = movement.y;
        this.speed = movement.speed;
        if (len > 6) {
            this.animateStep = 2;
        }
        else {
            this.animateStep = 1;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,