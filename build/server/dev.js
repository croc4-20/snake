import child_process from 'child_process';
import chokidar from 'chokidar';
import ip from 'ip';
import path from 'path';
const address = ip.address();
let timeout;
let serverProcess;
// start building
const buildProcess = child_process.spawn('npm', ['run', 'build'], {
    env: Object.assign(Object.assign({}, process.env), { LOCAL_IP: address }),
    stdio: [0, 1, 2],
});
startServerProcess();
// watch file change and restart server
const watcher = chokidar
    .watch([path.resolve(__dirname, './'), path.resolve(__dirname, '../web/common')])
    .on('add', startServerProcess)
    .on('change', startServerProcess)
    .on('unlink', startServerProcess);
function startServerProcess(f) {
    clearTimeout(timeout);
    timeout = setTimeout(() => {
        if (f) {
            console.info(f + ' changed, restart server...');
        }
        if (serverProcess && !serverProcess.killed) {
            serverProcess.kill('SIGINT');
        }
        serverProcess = child_process.spawn('node', ['--require', 'ts-node/register', path.resolve(__dirname, './index.ts')], {
            stdio: [0, 1, 2],
        });
        serverProcess.on('error', () => {
            console.info('server error, restart now');
            setTimeout(startServerProcess, 2000);
        });
    }, 1000);
}
function close() {
    watcher.close();
    if (serverProcess && !serverProcess.killed) {
        serverProcess.kill('SIGINT');
    }
    if (buildProcess && !buildProcess.killed) {
        buildProcess.kill('SIGINT');
    }
}
process.on('exit', close);
process.on('SIGINT', close);
process.on('SIGTERM', close);
process.on('SIGHUP', close);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc2VydmVyL2Rldi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLGFBQWEsTUFBTSxlQUFlLENBQUM7QUFDMUMsT0FBTyxRQUFRLE1BQU0sVUFBVSxDQUFDO0FBQ2hDLE9BQU8sRUFBRSxNQUFNLElBQUksQ0FBQztBQUNwQixPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFDeEIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQzdCLElBQUksT0FBTyxDQUFDO0FBQ1osSUFBSSxhQUF5QyxDQUFDO0FBRTlDLGlCQUFpQjtBQUNqQixNQUFNLFlBQVksR0FBRyxhQUFhLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsRUFBRTtJQUNoRSxHQUFHLGtDQUNFLE9BQU8sQ0FBQyxHQUFHLEtBQ2QsUUFBUSxFQUFFLE9BQU8sR0FDbEI7SUFDRCxLQUFLLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztDQUNqQixDQUFDLENBQUM7QUFFSCxrQkFBa0IsRUFBRSxDQUFDO0FBRXJCLHVDQUF1QztBQUN2QyxNQUFNLE9BQU8sR0FBRyxRQUFRO0tBQ3JCLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLGVBQWUsQ0FBQyxDQUFDLENBQUM7S0FDaEYsRUFBRSxDQUFDLEtBQUssRUFBRSxrQkFBa0IsQ0FBQztLQUM3QixFQUFFLENBQUMsUUFBUSxFQUFFLGtCQUFrQixDQUFDO0tBQ2hDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztBQUVwQyxTQUFTLGtCQUFrQixDQUFDLENBQVU7SUFDcEMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3RCLE9BQU8sR0FBRyxVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ3hCLElBQUksQ0FBQyxFQUFFLENBQUM7WUFDTixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyw2QkFBNkIsQ0FBQyxDQUFDO1FBQ2xELENBQUM7UUFFRCxJQUFJLGFBQWEsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUMzQyxhQUFhLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQy9CLENBQUM7UUFFRCxhQUFhLEdBQUcsYUFBYSxDQUFDLEtBQUssQ0FDakMsTUFBTSxFQUNOLENBQUMsV0FBVyxFQUFFLGtCQUFrQixFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLFlBQVksQ0FBQyxDQUFDLEVBQ3hFO1lBQ0UsS0FBSyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDakIsQ0FDRixDQUFDO1FBRUYsYUFBYSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFO1lBQzdCLE9BQU8sQ0FBQyxJQUFJLENBQUMsMkJBQTJCLENBQUMsQ0FBQztZQUMxQyxVQUFVLENBQUMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDdkMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDWCxDQUFDO0FBRUQsU0FBUyxLQUFLO0lBQ1osT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBRWhCLElBQUksYUFBYSxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQzNDLGFBQWEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVELElBQUksWUFBWSxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ3pDLFlBQVksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDOUIsQ0FBQztBQUNILENBQUM7QUFFRCxPQUFPLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztBQUMxQixPQUFPLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUM1QixPQUFPLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUM3QixPQUFPLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQyJ9